version: "3.8"
services:

  client:
    build:
      context: ./Client
      dockerfile: ./Dockerfile # installs OpenTelemetry .NET Automatic Instrumentation
    env_file:
      - otel-dotnet.env # enables OpenTelemetry .NET Automatic Instrumentation
    environment:
      SERVICE_URL: "http://service:5000"
      # OpenTelemetry environmental variables:
      OTEL_SERVICE_NAME: "client"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
    depends_on:
      - service
      - otel-collector

  service:
    build:
      context: ./Service
      dockerfile: ./Dockerfile # installs OpenTelemetry .NET Automatic Instrumentation
    env_file:
      - otel-dotnet.env # enable OpenTelemetry .NET Automatic Instrumentation
    environment:
      ASPNETCORE_URLS: http://*:5000/
      DB_CONNECTION: "Server=sqlserver,1433;User=sa;Password=Password1!;TrustServerCertificate=True;"
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;User=sa;Password=Password1!;Database=sample;TrustServerCertificate=True;"
      # OpenTelemetry environmental variables:
      OTEL_SERVICE_NAME: "service"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
      OTEL_DOTNET_AUTO_TRACES_ADDITIONAL_SOURCES: "Examples.Service"
      OTEL_DOTNET_AUTO_METRICS_ADDITIONAL_SOURCES: "Examples.Service"
      OTEL_DOTNET_AUTO_LOGS_CONSOLE_EXPORTER_ENABLED: "false"
      OTEL_DOTNET_AUTO_LOGS_INSTRUMENTATION_ENABLED: "false"
    ports:
      - "5000:5000"
    depends_on:
      - sqlserver
      - otel-collector

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Password1!
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
     - sqlserver-data:/var/opt/mssql

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    volumes:
      - ./otel-config.yaml:/etc/otel/config.yaml
      - ./.data/log:/log/otel
    command: --config /etc/otel/config.yaml
    environment:
      TEMPO_ENDPOINT: "tempo:4317"
      LOKI_ENDPOINT: "http://loki:3100/loki/api/v1/push"
    ports:
      - "8889:8889"   # Prometheus metrics exporter (scrape endpoint)
      - "13133:13133" # health_check extension
      - "55679:55679" # ZPages extension
      - "4318:4318"   # OTEL http
    depends_on:
      - tempo
      - prometheus
      - loki

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - ./.data/tempo:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin

  prometheus:
    image: prom/prometheus:v2.42.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  loki:
    image: grafana/loki:2.7.4
    ports:
      - "3100:3100"

  grafana:
    image: grafana/grafana:9.4.3
    volumes:
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor
    ports:
      - "3000:3000"
    
volumes:
  sqlserver-data:
